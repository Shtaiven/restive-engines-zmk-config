/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * Modified for shockboard by Steven Eisinger
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    combos {
        compatible = "zmk,combos";

        CAPS_COMBO {
            bindings = <&kp CAPSLOCK>;
            key-positions = <48 49>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |  0  |  BKSP |
            // |  TAB  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |   '   |
            // | CTRL  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  ENT  |
            //         |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            //                     | GUI | SPC | LWR |   | RSE | SHFT | ALT |

            bindings = <
&kp TILDE   &kp N1          &kp N2  &kp N3          &kp N4              &kp N5          &kp N6           &kp N7              &kp N8          &kp N9   &kp N0             &kp BSPC
&kp TAB     &kp Q           &kp W   &kp E           &kp R               &kp T           &kp Y            &kp U               &kp I           &kp O    &kp P              &kp DELETE
&kp ESCAPE  &mt LEFT_GUI A  &kp S   &mt LEFT_ALT D  &mt LEFT_CONTROL F  &kp G           &kp H            &mt LEFT_CONTROL J  &mt LEFT_ALT K  &kp L    &mt LEFT_GUI SEMI  &kp SINGLE_QUOTE
            &kp Z           &kp X   &kp C           &kp V               &kp B           &kp N            &kp M               &kp COMMA       &kp DOT  &kp FSLH
                                    &mo 2           &lt 1 SPACE         &kp LEFT_SHIFT  &kp RIGHT_SHIFT  &lt 4 ENTER         &kp RIGHT_ALT
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |  F12 | F1  | F2  | F3  | F4  | F5  |   |  F6 | F7   | F8  | F9  | F10  |  F11 |
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |   0  |      |
            // | CTRL | BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN  |  UP | RGT |      |      |
            //        |     |     |     |     |BTCLR|   |     |      |     |     |      |      |
            //                    | GUI | SPC |     |   |     | SHFT | ALT |

            bindings = <
&kp F12  &kp F1        &kp F2        &kp F3         &kp F4            &kp F5  &kp F6         &kp F7         &kp F8      &kp F9       &kp F10          &kp F11
&trans   &trans        &trans        &trans         &kp LEFT_SHIFT    &trans  &trans         &kp PAGE_DOWN  &kp UP      &kp PAGE_UP  &kp PRINTSCREEN  &none
&trans   &kp LEFT_GUI  &none         &kp LEFT_ALT   &kp LEFT_CONTROL  &trans  &kp HOME       &kp LEFT       &kp DOWN    &kp RIGHT    &kp END          &kp INSERT
         &none         &kp C_AC_CUT  &kp C_AC_COPY  &kp C_AC_PASTE    &none   &trans         &trans         &trans      &trans       &trans
                                     &trans         &trans            &trans  &kp BACKSPACE  &trans         &kp DELETE
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans        &trans        &trans         &trans            &trans  &trans     &trans     &trans     &trans  &trans  &trans
&trans  &trans        &trans        &trans         &kp LEFT_SHIFT    &trans  &trans     &trans     &trans     &trans  &trans  &trans
&trans  &kp LEFT_GUI  &trans        &kp LEFT_ALT   &kp LEFT_CONTROL  &trans  &trans     &trans     &trans     &trans  &trans  &trans
        &trans        &kp C_AC_CUT  &kp C_AC_COPY  &kp C_AC_PASTE    &trans  &trans     &trans     &trans     &trans  &trans
                                    &trans         &trans            &trans  &mkp MCLK  &mkp LCLK  &mkp RCLK
            >;
        };

        symbol_layer {
            // -----------------------------------------------------------------------------------------
            // |  F12 | F1  | F2  | F3  | F4  | F5  |   |  F6  | F7   | F8  | F9  | F10 | F11 |
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |   ^  |  &   |  *  |  (  |  )  |  `  |
            // | CTRL |     |     |     |     |     |   |   -  |  =   |  [  |  ]  |  \  |  ~  |
            //        |     |     |     |     |     |   |   _  |  +   |  {  |  }  | "|" |
            //                    | GUI | SPC |     |   |      | SHFT | ALT |

            bindings = <
&kp F12  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7            &kp F8        &kp F9  &kp F10       &kp F11
&trans   &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT_SHIFT    &trans        &trans  &trans        &trans
&trans   &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT_CONTROL  &kp LEFT_ALT  &trans  &kp LEFT_GUI  &trans
         &trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans        &trans  &trans
                         &trans  &trans  &trans  &trans  &trans            &trans
            >;
        };

        function_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 2          &bt BT_SEL 3          &bt BT_SEL 4  &bootloader  &none             &none           &none               &none  &soft_off
&none       &none         &ext_power EP_TOG  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none         &none        &none             &kp C_REWIND    &kp C_FAST_FORWARD  &none  &none
&none       &none         &kp C_MUTE         &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &none         &none        &kp C_PLAY_PAUSE  &kp C_PREVIOUS  &kp C_NEXT          &none  &none
            &none         &none              &none                 &none                 &none         &none        &none             &none           &none               &none
                                             &none                 &none                 &none         &none        &none             &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        raise_lower {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };
};
