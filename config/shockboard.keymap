/*
 * Copyright (c) 2024 Steven Eisinger
 *
 * SPDX-License-Identifier: MIT
 */

// Required to be defined before mouse keys import
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>


//---------------------------------------------------------------------------------------------------------------------
// Global defines

#define PHT_TAPPING_TERM_MS     280  // Positional hold tap tapping term (ms)
#define PHT_IDLE_MS             150  // Positional hold tap require idle time (ms)
#define LT_TAPPING_TERM_MS      200  // Layer tap tapping term (ms)
#define MOD_TOG_TAPPING_TERM_MS 200  // Mod tap tapping term (ms)
#define QUICK_TAP_MS            175  // Quick tap timing (ms)
#define SK_RELEASE_AFTER_MS     900  // Release sticky key after (ms)
#define COMBO_TERM_FAST_MS       18  // Fast combo term for horizontal combos (ms)
#define COMBO_TERM_SLOW_MS       30  // Slow combo term for vertical combos (ms)
#define COMBO_IDLE_FAST_MS      150  // Fast require prior idle time for horizontal combos (ms)
#define COMBO_IDLE_SLOW_MS       50  // Slow require prior idle time for vertical combos (ms)

#define NONE 0  // Null keypress


//---------------------------------------------------------------------------------------------------------------------
// Layer definitions

#define DEFAULT 0
#define NAV     1
#define NUM     2
#define MOUSE   3
#define FUN     4
#define SETTING 5
#define GAME    6


//---------------------------------------------------------------------------------------------------------------------
// Defaults reconfiguration

&lt {
    flavor = "balanced";
    tapping-term-ms = <LT_TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&sk {
    release-after-ms = <SK_RELEASE_AFTER_MS>;
    quick-release;
};

&mmv {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <500>;
    delay-ms = <0>;
};

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <40>;
    delay-ms = <0>;
};


//---------------------------------------------------------------------------------------------------------------------

/ {
    combos {
        compatible = "zmk,combos";

        // Vertical combos
        combo_left_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <28 16>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <27 15>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <26 14>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_right_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 31>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <20 32>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <21 33>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        // Horizontal combos
        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <21 20>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <15 16>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <15 14>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <20 19>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <38 37>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <38 39>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <42 43>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <43 44>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_f11 {
            bindings = <&kp F11>;
            key-positions = <3 4>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <NAV NUM>;
        };

        combo_f12 {
            bindings = <&kp F12>;
            key-positions = <8 7>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <NAV NUM>;
        };

        // Split combos
        combo_caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <27 32>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };
    };


//---------------------------------------------------------------------------------------------------------------------

    behaviors {
        pht_left: pht_left {
            compatible = "zmk,behavior-hold-tap";  // Positional hold tap left
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <PHT_TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PHT_IDLE_MS>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 42 43 44 45 46 47 48 49 50 51>;
            hold-trigger-on-release;
        };

        pht_right: pht_right {
            compatible = "zmk,behavior-hold-tap";  // Positional hold tap right
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <PHT_TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PHT_IDLE_MS>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 46 47 48 49 50 51>;
            hold-trigger-on-release;
        };

        mo_tog: mo_tog {  // Momentary layer on hold, toggle on tap
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&tog>;
            tapping-term-ms = <MOD_TOG_TAPPING_TERM_MS>;
        };

        to_hold: to_hold {  // Layer on hold
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&to>, <&kp>;
            tapping-term-ms = <LT_TAPPING_TERM_MS>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        }
    };


//---------------------------------------------------------------------------------------------------------------------

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&to_hold FUN NONE  &kp N1                &kp N2                &kp N3                    &kp N4                  &kp N5       &kp N6             &kp N7                    &kp N8                     &kp N9                 &kp N0                    &to_hold MOUSE NONE
&to_hold NUM NONE  &kp Q                 &kp W                 &kp E                     &kp R                   &kp T        &kp Y              &kp U                     &kp I                      &kp O                  &kp P                     &to_hold NAV NONE
&kp ESCAPE         &pht_left LEFT_ALT A  &pht_left LEFT_GUI S  &pht_left LEFT_CONTROL D  &pht_left LEFT_SHIFT F  &kp G        &kp H              &pht_right RIGHT_SHIFT J  &pht_right LEFT_CONTROL K  &pht_right LEFT_GUI L  &pht_right LEFT_ALT SEMI  &kp SINGLE_QUOTE
                   &kp Z                 &kp X                 &kp C                     &kp V                   &kp B        &kp N              &kp M                     &kp COMMA                  &kp DOT                &kp FSLH
                                                               &lt MOUSE BACKSPACE       &kp SPACE               &lt NAV TAB  &lt NUM ENTER      &smart_shft               &lt FUN DELETE
            >;
        };

        nav_layer {
            bindings = <
&to FUN  &kp F1        &kp F2        &kp F3            &kp F4          &kp F5  &kp F6    &kp F7         &kp F8    &kp F9       &kp F10          &to MOUSE
&to NUM  &none         &none         &none             &none           &none   &none     &kp PAGE_DOWN  &kp UP    &kp PAGE_UP  &kp PRINTSCREEN  &to DEFAULT
&none    &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none   &kp HOME  &kp LEFT       &kp DOWN  &kp RIGHT    &kp END          &kp INSERT
         &none         &kp C_AC_CUT  &kp C_AC_COPY     &kp C_AC_PASTE  &none   &none     &none          &none     &none        &none
                                     &trans            &trans          &trans  &trans    &trans         &trans
            >;
        };

        num_layer {
            bindings = <
&to FUN      &kp F1           &kp F2           &kp F3           &kp F4           &kp F5           &kp F6          &kp F7           &kp F8            &kp F9        &kp F10       &to MOUSE
&to DEFAULT  &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MULTIPLY  &none           &none            &none             &none         &none         &to NAV
&to GAME     &kp KP_NUMBER_0  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS      &kp KP_NUMLOCK  &kp RIGHT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_GUI  &kp LEFT_ALT  &none
             &kp KP_DOT       &kp KP_NUMBER_1  &kp KP_N2        &kp KP_NUMBER_3  &kp KP_MINUS     &none           &none            &none             &none         &none
                                               &trans           &trans           &trans           &trans          &trans           &trans
            >;
        };

        mouse_layer {
            bindings = <
&to FUN  &none         &none         &none             &none           &none   &none           &none           &none           &none            &none            &to DEFAULT
&to NUM  &none         &none         &none             &none           &none   &none           &msc SCRL_DOWN  &mmv MOVE_UP    &msc SCRL_UP     &none            &to NAV
&none    &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none   &msc SCRL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_RIGHT  &none
         &none         &kp C_AC_CUT  &kp C_AC_COPY     &kp C_AC_PASTE  &none   &none           &mkp MB4        &mkp MB5        &none            &none
                                     &trans            &trans          &trans  &mkp RCLK       &mkp LCLK       &mkp MCLK
            >;
        };

        fun_layer {
            bindings = <
&to DEFAULT  &none  &kp F10  &kp F11  &kp F12  &none  &none  &none             &none            &none         &none         &to MOUSE
&to NUM      &none  &kp F7   &kp F8   &kp F9   &none  &none  &none             &none            &none         &none         &to NAV
&to GAME     &none  &kp F4   &kp F5   &kp F6   &none  &none  &kp RIGHT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_GUI  &kp LEFT_ALT  &none
             &none  &kp F1   &kp F2   &kp F3   &none  &none  &none             &none            &none         &none
                             &none    &none    &none  &none  &none             &none
            >;
        };

        setting_layer {
            bindings = <
&none       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2          &bt BT_SEL 3          &bt BT_SEL 4  &bootloader  &out OUT_TOG    &none               &none             &none  &none
&none       &none         &none         &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none         &none        &kp C_REWIND    &kp C_FAST_FORWARD  &none             &none  &none
&bt BT_CLR  &none         &kp C_MUTE    &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &to GAME      &none        &kp C_PREVIOUS  &kp C_NEXT          &kp C_PLAY_PAUSE  &none  &none
            &none         &none         &none                 &none                 &none         &none        &none           &none               &none             &none
                                        &none                 &none                 &none         &none        &none           &none
            >;
        };

        game_layer {
            bindings = <
&to FUN     &kp GRAVE       &kp N1  &kp N2            &kp N3     &kp N4        &none  &none           &none           &none            &none  &to MOUSE
&to NUM     &kp TAB         &kp Q   &kp W             &kp E      &kp R         &none  &none           &kp UP_ARROW    &none            &none  &to NAV
&kp ESCAPE  &kp CAPSLOCK    &kp A   &kp S             &kp D      &kp F         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none  &to DEFAULT
            &kp LEFT_SHIFT  &kp Z   &kp X             &kp C      &kp V         &none  &none           &none           &none            &none
                                    &kp LEFT_CONTROL  &kp SPACE  &kp LEFT_ALT  &none  &kp ENTER       &none
            >;
        };
    };


//---------------------------------------------------------------------------------------------------------------------

    conditional_layers {
        compatible = "zmk,conditional-layers";

        condition_setting_layer {
            if-layers = <NAV NUM>;
            then-layer = <SETTING>;
        };
    };
};
