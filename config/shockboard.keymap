/*
 * Copyright (c) 2024 Steven Eisinger
 *
 * SPDX-License-Identifier: MIT
 */

// Required to be defined before mouse keys import
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>


//--------------------------------------------------------------------------------------------------
// Global defines

#define PHT_TAPPING_TERM_MS     280  // Positional hold tap tapping term (ms)
#define PHT_IDLE_MS             200  // Positional hold tap require idle time (ms)
#define LT_TAPPING_TERM_MS      200  // Layer tap tapping term (ms)
#define MOD_TOG_TAPPING_TERM_MS 200  // Mod tap tapping term (ms)
#define QUICK_TAP_MS            225  // Quick tap timing (ms)
#define SK_RELEASE_AFTER_MS     900  // Release sticky key after (ms)
#define COMBO_TERM_FAST_MS       18  // Fast combo term for horizontal combos (ms)
#define COMBO_TERM_SLOW_MS       30  // Slow combo term for vertical combos (ms)
#define COMBO_IDLE_FAST_MS      150  // Fast require prior idle time for horizontal combos (ms)
#define COMBO_IDLE_SLOW_MS       50  // Slow require prior idle time for vertical combos (ms)

#define NONE 0  // Null keypress


//--------------------------------------------------------------------------------------------------
// Layer definitions

#define DEFAULT 0
#define NAV     1
#define NUM     2
#define SYM     3
#define FUN     4
#define SET     5
#define GAME    6


//--------------------------------------------------------------------------------------------------
// Homerow mod (HRM) definitions

#define HRM_INDEX  LEFT_CONTROL
#define HRM_MIDDLE LEFT_GUI
#define HRM_RING   LEFT_ALT
#define HRM_PINKY  LEFT_SHIFT


//--------------------------------------------------------------------------------------------------
// Defaults reconfiguration

&lt {
    flavor = "balanced";
    tapping-term-ms = <LT_TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    hold-while-undecided;
};

&sk {
    release-after-ms = <SK_RELEASE_AFTER_MS>;
    quick-release;
};

&mmv {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <500>;
    delay-ms = <0>;
};

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <40>;
    delay-ms = <0>;
};


//--------------------------------------------------------------------------------------------------

/ {
    combos {
        compatible = "zmk,combos";

        // Vertical combos
        combo_n1 {
        bindings = <&kp N1>;
            key-positions = <25 13>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_n2 {
            bindings = <&kp N2>;
            key-positions = <26 14>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_n3 {
            bindings = <&kp N3>;
            key-positions = <27 15>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_n4 {
            bindings = <&kp N4>;
            key-positions = <28 16>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_n5 {
            bindings = <&kp N5>;
            key-positions = <29 17>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_n6 {
            bindings = <&kp N6>;
            key-positions = <30 18>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_n7 {
            bindings = <&kp N7>;
            key-positions = <19 31>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_n8 {
            bindings = <&kp N8>;
            key-positions = <20 32>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_n9 {
            bindings = <&kp N9>;
            key-positions = <21 33>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_n0 {
            bindings = <&kp N0>;
            key-positions = <22 34>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };

        combo_n1_game {
            bindings = <&kp N1>;
            key-positions = <26 14>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <GAME>;
        };

        combo_n2_game {
            bindings = <&kp N2>;
            key-positions = <27 15>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <GAME>;
        };

        combo_n3_game {
            bindings = <&kp N3>;
            key-positions = <28 16>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <GAME>;
        };

        combo_n4_game {
            bindings = <&kp N4>;
            key-positions = <29 17>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <GAME>;
        };

        // Horizontal combos
        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <21 20>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <15 16>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <15 14>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <20 19>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <38 37>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <38 39>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <42 43>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <43 44>;
            timeout-ms = <COMBO_TERM_FAST_MS>;
            require-prior-idle-ms = <COMBO_IDLE_FAST_MS>;
            layers = <DEFAULT>;
        };

        // Split combos
        combo_caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <27 32>;
            timeout-ms = <COMBO_TERM_SLOW_MS>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW_MS>;
            layers = <DEFAULT>;
        };
    };


//--------------------------------------------------------------------------------------------------

    macros {
        bt_sel_0: bt_sel_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0>;
        };

        bt_disc_0: bt_disc_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_DISC 0>;
        };

        bt_sel_1: bt_sel_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1>;
        };

        bt_disc_1: bt_disc_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_DISC 1>;
        };

        bt_sel_2: bt_sel_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2>;
        };

        bt_disc_2: bt_disc_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_DISC 2>;
        };

        bt_sel_3: bt_sel_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3>;
        };

        bt_disc_3: bt_disc_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_DISC 3>;
        };

        bt_sel_4: bt_sel_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4>;
        };

        bt_disc_4: bt_disc_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_DISC 4>;
        };
    };


//--------------------------------------------------------------------------------------------------

    behaviors {
        pht_left: pht_left {  // Positional hold tap left
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <PHT_TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PHT_IDLE_MS>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 42 43 44 45 46 47 48 49 50 51>;
            hold-trigger-on-release;
        };

        pht_right: pht_right {  // Positional hold tap right
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <PHT_TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <PHT_IDLE_MS>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 46 47 48 49 50 51>;
            hold-trigger-on-release;
        };

        to_hold: to_hold {  // Layer on hold
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&to>, <&kp>;
            tapping-term-ms = <LT_TAPPING_TERM_MS>;
        };

        smart_shft: smart_shift {  // Sticky shift on tap, caps word on double tap, shift on hold
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        bt_hold_0: bt_hold_0 {  // Disconnect on hold, connect on tap
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&bt_disc_0>, <&bt_sel_0>;
            tapping-term-ms = <LT_TAPPING_TERM_MS>;
        };

        bt_hold_1: bt_hold_1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&bt_disc_1>, <&bt_sel_1>;
            tapping-term-ms = <LT_TAPPING_TERM_MS>;
        };

        bt_hold_2: bt_hold_2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&bt_disc_2>, <&bt_sel_2>;
            tapping-term-ms = <LT_TAPPING_TERM_MS>;
        };

        bt_hold_3: bt_hold_3 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&bt_disc_3>, <&bt_sel_3>;
            tapping-term-ms = <LT_TAPPING_TERM_MS>;
        };

        bt_hold_4: bt_hold_4 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&bt_disc_4>, <&bt_sel_4>;
            tapping-term-ms = <LT_TAPPING_TERM_MS>;
        };
    };


//--------------------------------------------------------------------------------------------------

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp MINUS   &kp N1                 &kp N2                &kp N3                  &kp N4                 &kp N5         &kp N6             &kp N7                  &kp N8                   &kp N9                 &kp N0                     &kp EQUAL
&kp GRAVE   &kp Q                  &kp W                 &kp E                   &kp R                  &kp T          &kp Y              &kp U                   &kp I                    &kp O                  &kp P                      &kp BACKSLASH
&kp ESCAPE  &pht_left HRM_PINKY A  &pht_left HRM_RING S  &pht_left HRM_MIDDLE D  &pht_left HRM_INDEX F  &kp G          &kp H              &pht_right HRM_INDEX J  &pht_right HRM_MIDDLE K  &pht_right HRM_RING L  &pht_right HRM_PINKY SEMI  &kp SINGLE_QUOTE
            &kp Z                  &kp X                 &kp C                   &kp V                  &kp B          &kp N              &kp M                   &kp COMMA                &kp DOT                &kp SLASH
                                                         &lt SYM TAB             &kp SPACE              &lt NAV ENTER  &lt NUM BACKSPACE  &smart_shft             &lt FUN DELETE
            >;
        };

        // TODO: make layer switching in the upper left and right corner better
        nav_layer {
            bindings = <
&to FUN        &none          &none         &none           &none          &none   &none     &none          &none     &none        &none            &to SYM
&to NUM        &none          &none         &none           &none          &none   &none     &kp PAGE_DOWN  &kp UP    &kp PAGE_UP  &kp PRINTSCREEN  &to DEFAULT
&sk RIGHT_ALT  &kp HRM_PINKY  &kp HRM_RING  &kp HRM_MIDDLE  &kp HRM_INDEX  &none   &kp HOME  &kp LEFT       &kp DOWN  &kp RIGHT    &kp END          &kp INSERT
               &kp LC(Z)      &kp LC(X)     &kp LC(C)       &kp LC(V)      &none   &none     &none          &none     &none        &none
                                            &trans          &trans         &trans  &trans    &trans         &trans
            >;
        };

        num_layer {
            bindings = <
&to FUN         &none            &none            &none            &none            &none         &none   &none          &none           &none         &none          &to SYM
&to DEFAULT     &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS  &none   &none          &none           &none         &none          &to NAV
&kp KP_NUMLOCK  &kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &none   &kp HRM_INDEX  &kp HRM_MIDDLE  &kp HRM_RING  &kp HRM_PINKY  &sk RIGHT_ALT
                &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT    &none   &none          &none           &none         &none
                                                  &trans           &trans           &trans        &trans  &trans         &trans
            >;
        };

        sym_layer {
            bindings = <
&to FUN        &none          &none         &none           &none          &none   &none        &none          &none             &none                 &none                  &to DEFAULT
&to NUM        &none          &none         &none           &none          &none   &kp PERCENT  &kp DOLLAR     &kp HASH          &kp AT_SIGN           &kp EXCLAMATION        &to NAV
&sk RIGHT_ALT  &kp HRM_PINKY  &kp HRM_RING  &kp HRM_MIDDLE  &kp HRM_INDEX  &none   &kp CARET    &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE
               &kp LC(Z)      &kp LC(X)     &kp LC(C)       &kp LC(V)      &none   &kp MINUS    &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp BACKSLASH
                                            &trans          &trans         &trans  &trans       &trans         &trans
            >;
        };

        fun_layer {
            bindings = <
&to DEFAULT  &none   &none    &none    &none    &none  &none  &none          &none           &none         &none          &to SYM
&to NUM      &kp F9  &kp F10  &kp F11  &kp F12  &none  &none  &none          &none           &none         &none          &to NAV
&none        &kp F5  &kp F6   &kp F7   &kp F8   &none  &none  &kp HRM_INDEX  &kp HRM_MIDDLE  &kp HRM_RING  &kp HRM_PINKY  &sk RIGHT_ALT
             &kp F1  &kp F2   &kp F3   &kp F4   &none  &none  &none          &none           &none         &none
                              &none    &none    &none  &none  &none          &none
            >;
        };

        set_layer {
            bindings = <
&none         &none         &none         &none                 &none                 &none         &none  &none           &none             &none               &none  &none
&bt BT_CLR    &bt_hold_0 0  &bt_hold_1 0  &bt_hold_2 0          &bt_hold_3 0          &bt_hold_4 0  &none  &kp C_REWIND    &none             &kp C_FAST_FORWARD  &none  &none
&out OUT_TOG  &none         &kp C_MUTE    &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &to GAME      &none  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT          &none  &bootloader
              &none         &none         &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none         &none  &none           &none             &none               &none
                                          &none                 &none                 &none         &none  &none           &none
            >;
        };

        game_layer {
            bindings = <
&to FUN     &kp GRAVE       &kp N1  &kp N2            &kp N3     &kp N4        &none  &none           &none           &none            &none  &to SYM
&to NUM     &kp TAB         &kp Q   &kp W             &kp E      &kp R         &none  &none           &kp UP_ARROW    &none            &none  &to NAV
&kp ESCAPE  &kp CAPSLOCK    &kp A   &kp S             &kp D      &kp F         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none  &to DEFAULT
            &kp LEFT_SHIFT  &kp Z   &kp X             &kp C      &kp V         &none  &none           &none           &none            &none
                                    &kp LEFT_CONTROL  &kp SPACE  &kp LEFT_ALT  &none  &kp ENTER       &none
            >;
        };
    };


//--------------------------------------------------------------------------------------------------

    conditional_layers {
        compatible = "zmk,conditional-layers";

        condition_setting_layer {
            if-layers = <NAV NUM>;
            then-layer = <SET>;
        };
    };
};
